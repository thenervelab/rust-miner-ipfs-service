[service]
poll_interval_secs = 12 # How often to poll the chain for miner profile json CID changes
reconcile_interval_secs = 12 # How often check progress on ongoing pin tasks
health_check_interval_secs = 30 # How often to check substrate / ipfs node connection
ipfs_cat_timeout_secs = 30 # How long before cat miner profile json gives up in one iteration
ipfs_gc_interval_secs = 300 # How often to request IPFS garbage collection
initial_pin_concurrency = 32 # Maximum initial concurrent pin tasks 
# Increases by one for each error or stalling progress
stalling_pin_task_detection = 120 # How many seconds without progress in a pin task
# To trigger stalling pin task warning notification

[db]
path = "./miner_db_pool"

[ipfs]
# Kubo API endpoint
api_url = "http://127.0.0.1:5001"
bootstrap = [
  "/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ",
  "/ip4/203.0.113.5/tcp/4001/p2p/12D3KooWAbCdEfGh"
]

[substrate]
# WebSocket endpoint for Substrate node
ws_url = "ws://127.0.0.1:9944"
# Read the miner profile CID from this pallet/storage.
# Option A — dynamic storage lookup:
pallet = "IpfsPallet" # e.g., your pallet name
storage_item = "MinerProfile" # e.g., storage map (AccountId32 -> BoundedVec<u8>)
# 32-byte hex account id of the miner whose profile we track (without 0x)
miner_profile_id = "12D3KooWDEfckrwi1YC3Pv9fqwFz8GGpW1xoVPWdu7mEGsjVwSV1"

# Option B — raw storage key (overrides above if set)
# raw_storage_key_hex = "26aa394eea5630e07c48ae0c9558cef7..."

[telegram]
bot_token = "YOUR_TELEGRAM_BOT_TOKEN" # eg. 123456789:AAG9RuJiqgOGIfFbOPBpAo6QhIJoD9mCdDs
chat_id = "YOUR_CHAT_ID" 

[gmail]
username = "your@gmail.com"
app_password = "your apps pass word"
from = "your@gmail.com"
to = "alert-recipient@example.com"

[monitoring]
port = 9090